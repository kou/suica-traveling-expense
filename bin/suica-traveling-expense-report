#!/usr/bin/env ruby
#
# Copyright (C) 2018  Kouhei Sutou <kou@clear-code.com>
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

# Some codes in this program are learned from gsuica:
#
#   http://hito.music.coocan.jp/pasori/gsuica.html
#
# Here is the license of gsuica:
#
#   Copyright (C) 2005-2006, Hiroyuki Ito. ZXB01226@nifty.com
#
#   This program is free software; you can redistribute it and/or modify
#   it under the terms of the GNU General Public License as published by
#   the Free Software Foundation; either version 2 of the License, or
#   (at your option) any later version.
#
#   This program is distributed in the hope that it will be useful, but
#   WITHOUT ANY WARRANTY; without even the implied warranty of
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
#   General Public License for more details.
#
#   You should have received a copy of the GNU General Public License
#   along with this program; if not, write to the Free Software
#   Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307,
#   USA.

require "csv"
require "fileutils"
require "open-uri"
require "optparse"
require "pathname"

require "pasori"

require "spreadsheet"

class SuicaTravelingExpenseReporter
  class Station < Struct.new(:line_code,
                             :station_code,
                             :company_name,
                             :line_name,
                             :station_name)
    def name
      "#{company_name}: #{line_name}: #{station_name}"
    end
  end

  class StationDatabase
    def initialize
      cache_dir_path = Pathname.new("~/.cache/suica-traveling-expense-report")
      @path = (cache_dir_path + "StationCode.xls").expand_path
      @suica_stations = {}
    end

    def load
      unless @path.exist?
        FileUtils.mkdir_p(@path.parent.to_s)
        open("http://www.denno.net/SFCardFan/sendexcel.php") do |input|
          @path.open("wb") do |output|
            IO.copy_stream(input, output)
          end
        end
      end

      reader = Spreadsheet::Excel::Reader.new
      def reader.read_codepage(work, pos, len)
        @workbook.encoding = encoding(932)
      end
      workbook = @path.open("rb") do |input|
        reader.read(input)
      end
      workbook.worksheets.each do |worksheet|
        case worksheet.name
        when "Suica系コード"
          worksheet.each do |row|
            next if row.idx < 2
            station = Station.new(row[1].to_i(16),
                                  row[2].to_i(16),
                                  row[3],
                                  row[4],
                                  row[5])
            @suica_stations[[station.line_code, station.station_code]] = station
          end
        end
      end
    end

    def [](line_code, station_code)
      @suica_stations[[line_code, station_code]]
    end
  end

  class RawData
    attr_accessor :idm
    attr_accessor :in_out
    attr_accessor :history
    def initialize
      @idm = nil
      @in_out = []
      @history = []
    end
  end

  TERMINAL_TYPES = {
    0x03 => "精算機",
    0x05 => "車載端末",
    0x07 => "券売機",
    0x08 => "券売機",
    0x09 => "入金機",
    0x12 => "券売機",
    0x14 => "券売機等",
    0x15 => "券売機等",
    0x16 => "改札機",
    0x17 => "簡易改札機",
    0x18 => "窓口端末",
    0x19 => "窓口端末",
    0x1A => "改札端末",
    0x1B => "携帯電話",
    0x1C => "乗継精算機",
    0x1D => "連絡改札機",
    0x1F => "簡易入金機",
    0x23 => "新幹線改札機",
    0x46 => "VIEW ALTTE",
    0x48 => "VIEW ALTTE",
    0xC7 => "物販端末",
    0xC8 => "自販機",
  }

  EXPENSE_TYPES = {
    0x01 => "改札出場",
    0x02 => "チャージ",
    0x03 => "磁気券購入",
    0x04 => "精算",
    0x05 => "入場精算",
    0x06 => "改札窓口処理",
    0x07 => "新規発行",
    0x08 => "窓口控除",
    0x0d => "バス",
    0x0f => "バス",
    0x11 => "再発行処理",
    0x13 => "支払(新幹線利用)",
    0x14 => "入場時オートチャージ",
    0x15 => "出場時オートチャージ",
    0x1f => "バスチャージ",
    0x23 => "バス路面電車企画券購入",
    0x46 => "物販",
    0x48 => "特典チャージ",
    0x49 => "レジ入金",
    0x4a => "物販取消",
    0x4b => "入場物販",
    0xc6 => "現金併用物販",
    0xcb => "入場現金併用物販",
    0x84 => "他社精算",
    0x85 => "他社入場精算",
  }

  class HistoryEntry < Struct.new(:terminal_code,
                                  :manage_type,
                                  :in_station,
                                  :out_station,
                                  :balance,
                                  :region,
                                  :number,
                                  :timestamp)
    def terminal
      TERMINAL_TYPES[terminal_code]
    end

    def expense
      EXPENSE_TYPES[manage_type]
    end

    def auto_charge?
      expense.end_with?("オートチャージ")
    end
  end

  def initialize
    @database = StationDatabase.new
    @database.load

    @raw_data = RawData.new
    @raw_data_output_path = nil

    @history = []
  end

  def run(argv)
    parser = OptionParser.new
    parser.on("--output-raw-data=PATH",
              "Output raw data to PATH") do |path|
      @raw_data_output_path = path
    end
    @raw_data_input_paths = parser.parse!(argv)

    report
  end

  def report
    raw_data = read_raw_data
    raw_data.in_out.each do |in_out|
      # p [:in_out, in_out, parse_in_out(in_out)]
    end

    csv = CSV.new($stdout)
    csv << [
      "date",
      "from",
      "to",
      "destination",
      "fee",
    ]
    raw_data.history.each do |entry|
      @history << parse_history_entry(entry)
    end
    sorted_history = @history.sort_by do |entry|
      entry.number
    end
    current_balance = nil
    timestamp = nil
    in_station = nil
    fee = 0
    sorted_history.each do |entry|
      # p [entry.timestamp, entry.balance, entry.terminal, entry.expense, entry.in_station.name, entry.out_station.name]
      if current_balance.nil? or entry.auto_charge?
        current_balance = entry.balance
        next
      end

      fee += current_balance - entry.balance
      case entry.terminal
      when "連絡改札機"
        timestamp = entry.timestamp
        in_station = entry.in_station
      else
        timestamp ||= entry.timestamp
        in_station ||= entry.in_station
        csv << [
          timestamp.strftime("%Y-%m-%d"),
          in_station.station_name,
          entry.out_station.station_name,
          nil,
          fee,
        ]
        timestamp = nil
        in_station = nil
        fee = 0
      end
      current_balance = entry.balance
    end

    true
  end

  private
  def read_raw_data
    if @raw_data_input_paths.empty?
      Pasori.open do |pasori|
        felica = pasori.felica_polling(Felica::POLLING_SUICA)
        if felica.nil?
          raise "No Suica found."
        end

        @raw_data.idm = felica.idm

        felica.foreach(Felica::SERVICE_SUICA_IN_OUT) do |data|
          @raw_data.in_out << data
        end

        felica.foreach(Felica::SERVICE_SUICA_HISTORY) do |data|
          @raw_data.history << data
        end

        save_raw_data

        @raw_data.in_out.reverse!
        @raw_data.history.reverse!
      end
    else
      @raw_data_input_paths.sort.each do |path|
        File.open(path, "rb") do |file|
          raw_data = Marshal.load(file)
          @raw_data.idm ||= raw_data.idm
          @raw_data.in_out |= raw_data.in_out.reverse
          @raw_data.history |= raw_data.history.reverse
        end
      end
    end

    @raw_data
  end

  def save_raw_data
    return if @raw_data_output_path.nil?

    File.open(@raw_data_output_path, "wb") do |file|
      file.write(Marshal.dump(@raw_data))
    end
  end

  def parse_in_out(raw_data)
    type, line, station, _, _, date, time, expense, region =
      raw_data.unpack("nCCCCnnvN")
    timestamp = parse_timestamp(date, time)
    p [type, line, station, date, time, expense, region, timestamp]
    case type
    when 0xA000
      in_data = true
      p :in
    else
      out_data = true
      p :out
    end
  end

  def parse_history_entry(raw_data)
    terminal, manage_type = raw_data.unpack("CC")
    terminal_name = TERMINAL_TYPES[terminal]

    case terminal_name
    when "物販端末", "自販機"
    when "車載端末"
    else
      _, _, _, date, in_line, in_station, out_line, out_station, balance, region_and_number =
        raw_data.unpack("CCnnCCCCvN")
      region = (region_and_number >> 4) & 0x0F
      number = (region_and_number >> 8)
      timestamp = parse_timestamp(date, 0)
      HistoryEntry.new(terminal,
                       manage_type,
                       @database[in_line, in_station],
                       @database[out_line, out_station],
                       balance,
                       region,
                       number,
                       timestamp)
    end
  end

  def parse_timestamp(raw_date, raw_time)
    year = (raw_date >> 9) + 2000
    month = (raw_date >> 5) & 0x0F
    day = raw_date & 0x1F
    hour = ("%x" % (raw_time >> 8)).to_i
    minute = ("%x" % (raw_time & 0xFF)).to_i
    Time.local(year, month, day, hour, minute)
  end
end

reporter = SuicaTravelingExpenseReporter.new
exit(reporter.run(ARGV))
